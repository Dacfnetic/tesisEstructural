/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import components.Story;
import java.util.Vector;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import mampos.Utils;

/**
 *
 * @author Diego
 */
public final class StoriesDefinitionFrame extends javax.swing.JFrame implements TableModelListener {

    /**
     * Creates new form StoriesDefinitionFrame
     */
    private final DefaultTableModel model;
    private final Object[] columns = new Object[]{"Id", "Nombre", "Categoría",
                                            "Cota de nivel inferior",
                                            "Cota de nivel superior",
                                            "Altura de nivel"};
    private Vector previousVector;
    private int selectedRow = -1;
    
    Graphics g;
    
    public StoriesDefinitionFrame() {
        initComponents();
        g = drawingPane.getGraphics();
        drawingPane.paintComponents(g);
        model = (DefaultTableModel) storiesTable.getModel();
        previousVector = model.getDataVector();
        model.addTableModelListener(this);
        Utils.setFrameInMiddle(this, 700);
        updateTable();
        
        draw();
        // Buscar los valores dentro de objects para ver los niveles
    }
    
    public void updateTable(){
        
        int storiesQuantity = components.Objects.stories.size();
        
        components.Story[] stories = components.Objects.getStories();
        
        Object[][] data = new Object[storiesQuantity][6];
        
        for(int i = 0; i < storiesQuantity; i++){
            //model.getDataVector();
            data[i][0] = stories[i].id;
            data[i][1] = stories[i].name;
            data[i][2] = stories[i].category;
            data[i][3] = stories[i].lowerStoryHeight;
            data[i][4] = stories[i].upperStoryHeight;
            data[i][5] = stories[i].storyHeight;
        }
        
        components.Objects.setStories(data);
        
        
        model.setDataVector(data, columns);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        drawingPaneScroll = new javax.swing.JScrollPane();
        drawingPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        storiesTable = new javax.swing.JTable();
        insertBelowButton = new javax.swing.JButton();
        deleteStoryButton = new javax.swing.JButton();
        insertAboveButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Definición de niveles");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("storiesDefinitionFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        drawingPaneScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        drawingPaneScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        drawingPane.setBackground(new java.awt.Color(255, 255, 255));
        drawingPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        drawingPane.setInheritsPopupMenu(true);
        drawingPane.setName(""); // NOI18N
        drawingPane.setPreferredSize(new java.awt.Dimension(600, 700));

        javax.swing.GroupLayout drawingPaneLayout = new javax.swing.GroupLayout(drawingPane);
        drawingPane.setLayout(drawingPaneLayout);
        drawingPaneLayout.setHorizontalGroup(
            drawingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        drawingPaneLayout.setVerticalGroup(
            drawingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 696, Short.MAX_VALUE)
        );

        drawingPaneScroll.setViewportView(drawingPane);

        jScrollPane2.setToolTipText("");

        storiesTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        storiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id.", "Nombre", "Categoría", "Cota de nivel inferior", "Cota de nivel superior", "Altura de nivel"
            }
        ));
        storiesTable.setToolTipText("");
        storiesTable.setCellSelectionEnabled(true);
        storiesTable.setDoubleBuffered(true);
        storiesTable.setFillsViewportHeight(true);
        storiesTable.setPreferredSize(new java.awt.Dimension(600, 20));
        storiesTable.setShowGrid(false);
        storiesTable.setShowHorizontalLines(true);
        storiesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                storiesTableMouseClicked(evt);
            }
        });
        storiesTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                storiesTableInputMethodTextChanged(evt);
            }
        });
        jScrollPane2.setViewportView(storiesTable);

        insertBelowButton.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        insertBelowButton.setMnemonic('b');
        insertBelowButton.setText("Insertar abajo");
        insertBelowButton.setToolTipText("Selecciona una fila en la tabla y luego inserta una nueva fila debajo de la fila seleccionada");
        insertBelowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBelowButtonActionPerformed(evt);
            }
        });

        deleteStoryButton.setText("Borrar nivel");
        deleteStoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStoryButtonActionPerformed(evt);
            }
        });

        insertAboveButton.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        insertAboveButton.setMnemonic('e');
        insertAboveButton.setText("Insertar encima");
        insertAboveButton.setToolTipText("Selecciona una fila en la tabla y luego inserta una nueva fila debajo de la fila seleccionada");
        insertAboveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAboveButtonActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(insertAboveButton)
                        .addGap(105, 105, 105)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(52, 52, 52)
                                .addComponent(jButton2))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(insertBelowButton)
                                .addGap(99, 99, 99)
                                .addComponent(deleteStoryButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)))
                .addComponent(drawingPaneScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteStoryButton)
                    .addComponent(insertBelowButton)
                    .addComponent(insertAboveButton))
                .addGap(19, 19, 19))
            .addComponent(drawingPaneScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertBelowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBelowButtonActionPerformed
        // TODO add your handling code here:
     
        System.out.println("Presionado");
        previousVector = model.getDataVector();
        model.addRow(new Object[]{"2", "", "Estructural",0,0,3.0});
        components.Story story = new components.Story();
        story.setParams("2", "", "Estructural", 0.0f, 3.00f);
        components.Objects.addStory(story);
        sortRows("abajo", selectedRow);
        selectedRow = -1;
        toggleDeleteButtonEnabled();
      
    }//GEN-LAST:event_insertBelowButtonActionPerformed

    private void storiesTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_storiesTableInputMethodTextChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_storiesTableInputMethodTextChanged

    private void insertAboveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAboveButtonActionPerformed
        // TODO add your handling code here:
        
        System.out.println("Presionado");
        previousVector = model.getDataVector();
        components.Objects.setStories(Utils.convertVectorToObject(previousVector));
        model.addRow(new Object[]{"2", "", "Estructural",0,0,3.0});
        components.Story story = new components.Story();
        story.setParams("2", "", "Estructural", 0.0f, 3.00f);
        components.Objects.addStory(story);
        
        sortRows("encima", selectedRow);
        selectedRow = -1;
        toggleDeleteButtonEnabled();
    }//GEN-LAST:event_insertAboveButtonActionPerformed

    private void storiesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storiesTableMouseClicked
        // TODO add your handling code here:
        selectedRow = storiesTable.getSelectedRow();
        toggleDeleteButtonEnabled();
    }//GEN-LAST:event_storiesTableMouseClicked

    private void deleteStoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStoryButtonActionPerformed
        // TODO add your handling code here:
        drawingPane.paint(g);
        System.out.println("Presionado");
        previousVector = model.getDataVector();
        
        sortRows("eliminar", selectedRow);
        selectedRow = -1;
        toggleDeleteButtonEnabled();
        
        draw();
        
    }//GEN-LAST:event_deleteStoryButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mampos.Utils.saveToGson();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            mampos.Utils.loadToGson();
            updateTable();
        } catch (IOException ex) {
            Logger.getLogger(StoriesDefinitionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        draw();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        draw();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoriesDefinitionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoriesDefinitionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoriesDefinitionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoriesDefinitionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StoriesDefinitionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteStoryButton;
    private javax.swing.JPanel drawingPane;
    private javax.swing.JScrollPane drawingPaneScroll;
    private javax.swing.JButton insertAboveButton;
    private javax.swing.JButton insertBelowButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable storiesTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        if(model != null){
            Vector hola = model.getDataVector();
     
            if(!previousVector.equals(hola)){
                components.Objects.setStories(Utils.convertVectorToObject(hola));
                previousVector = model.getDataVector();
                updateTable();
                draw();
                
            }
        }
    }
    
    public void draw(){
        drawingPane.paint(g);
        int stories = components.Objects.stories.size();
        g.drawString("10", 10, 10);
 
        int alturaAcumulada = 0;
        for(int i = 0; i < stories; i++){
            Story nivel = components.Objects.stories.get(i);
            int alturaDeNivel = (int) (nivel.storyHeight * (60/3));
            int anchoNivel = 100;
            int anchoPanel = drawingPaneScroll.getWidth();
            int x = Math.round((anchoPanel/4f)-(anchoNivel/2f));
            int alto = drawingPane.getHeight();
            
            g.drawRect(40, 40 + alturaAcumulada, anchoNivel, alturaDeNivel);
            g.drawLine(30, 40 + alturaAcumulada, 30, 40 + alturaAcumulada + alturaDeNivel);
            g.drawLine(25, 40 + alturaAcumulada, 35, 40 + alturaAcumulada);
            g.drawLine(25, 40 + alturaAcumulada + alturaDeNivel, 35, 40 + alturaAcumulada + alturaDeNivel);
            
            g.drawLine(140 + 5, 40 + alturaAcumulada, 140+60, 40+ alturaAcumulada);
            g.drawLine(140 + 5, 40 + alturaAcumulada + alturaDeNivel, 140+60, 40 + alturaAcumulada + alturaDeNivel);
            
            alturaAcumulada += alturaDeNivel;
            
        }
        
    }
    
    private void toggleDeleteButtonEnabled(){
        int rowCount = storiesTable.getRowCount();
        if(selectedRow != -1 && rowCount > 1){
            deleteStoryButton.setEnabled(true);
        } else if (selectedRow == -1 && deleteStoryButton.isEnabled()) {
            deleteStoryButton.setEnabled(false);
        }
    }

    private void sortRows(String posicion, int fila) {
        
            int storiesQuantity = components.Objects.stories.size();
        
            components.Story[] stories = components.Objects.getStories();
            Object[][] data = new Object[storiesQuantity][6]; 
            
            for(int i = 0; i < storiesQuantity; i++){
                //model.getDataVector();
                data[i][0] = stories[i].id;
                data[i][1] = stories[i].name;
                data[i][2] = stories[i].category;
                data[i][3] = stories[i].lowerStoryHeight;
                data[i][4] = stories[i].upperStoryHeight;
                data[i][5] = stories[i].storyHeight;
            }            
            Object[] temp = data[storiesQuantity-1];
        
        if("encima".equals(posicion)){                                
            if(fila == -1){
                for(int i = storiesQuantity-1; i > 0; i--){
                    data[i] = data[i-1];
                }
                data[0] = temp;
            } else {                
                for(int i = storiesQuantity-1; i > 0; i--){
                    if(i == fila){
                        data[fila] = temp;
                        break;
                    }
                    data[i] = data[i-1];
                }               
            }          
        } else if ("abajo".equals(posicion)){
            if(fila != -1){
                for(int i = storiesQuantity-1; i > 0; i--){
                    if(i-1 == fila){
                        data[fila+1] = temp;
                        break;
                    }
                    data[i] = data[i-1];
                }     
            }
            
        } else if ("eliminar".equals(posicion)){
            
            Object[][] temporal = data;
            data = new Object[storiesQuantity-1][6];
            boolean eliminada = false;
            for(int i = 0; i <= storiesQuantity-1; i++){
                if(!eliminada){
                    if(i == fila){
                       eliminada = true;
                    } else {
                      data[i] = temporal[i];
                    }
                } else {
                    data[i-1] = temporal[i];
                }
                      
            }          
        }
        
        int counter = 1;
        
        
        //-------------------------------------
        components.Objects.setStories(data);
        stories = components.Objects.getStories();
        storiesQuantity = components.Objects.stories.size();
        
        for(int i = 0; i < storiesQuantity; i++){
            //model.getDataVector();
            data[i][0] = stories[i].id;
            data[i][1] = stories[i].name;
            data[i][2] = stories[i].category;
            data[i][3] = stories[i].lowerStoryHeight;
            data[i][4] = stories[i].upperStoryHeight;
            data[i][5] = stories[i].storyHeight;
        }      
        
        //components.Objects.setStories(data);
        
        model.setDataVector(data, columns);
        
        
    }
    
}
